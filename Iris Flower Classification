from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd

# Load the dataset
iris = load_iris()
X = iris.data
y = iris.target

# Convert to DataFrame
data = pd.DataFrame(X, columns=iris.feature_names)
data['species'] = y

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred, target_names=iris.target_names))

# Function to predict species from new data
def predict_species(sepal_length, sepal_width, petal_length, petal_width):
    input_data = scaler.transform([[sepal_length, sepal_width, petal_length, petal_width]])
    species = model.predict(input_data)
    return iris.target_names[species[0]]

# Example prediction
print("Predicted species:", predict_species(5.1, 3.5, 1.4, 0.2))
