import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load dataset (replace 'credit_data.csv' with actual dataset path)
data = pd.read_csv('credit_data.csv')

# Preprocessing: Handle missing values
data.fillna(data.median(), inplace=True)

# Encode categorical variables
label_encoders = {}
for col in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

# Split data into features and target variable
X = data.drop(columns=['Creditworthiness'])  # Replace with actual target column name
y = data['Creditworthiness']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Function to predict creditworthiness for new data
def predict_creditworthiness(new_data):
    new_data = pd.DataFrame([new_data])
    for col, le in label_encoders.items():
        if col in new_data:
            new_data[col] = le.transform(new_data[col])
    new_data = scaler.transform(new_data)
    prediction = model.predict(new_data)
    return prediction[0]

# Example usage
new_customer = {  # Replace with actual features
    'Age': 35,
    'Income': 50000,
    'Debt': 10000,
    'Credit_History': 'Good',
}
predicted_score = predict_creditworthiness(new_customer)
print("Predicted Creditworthiness:", predicted_score)
